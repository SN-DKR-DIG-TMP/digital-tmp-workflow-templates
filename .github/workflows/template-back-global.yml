name: Maven Test Only for Feature Branches

on:
  push:
    branches:
      - '**'  # écouter tous les push
  pull_request:
    branches:
      - '**'  # écouter toutes les PR
  workflow_call:
    inputs:
      MAVEN_CLI_OPTS:
        description: 'Options maven'
        required: false
        type: string
        default: "-s /root/.m2/settings.xml --batch-mode"
      docker_registry:
        description: 'Host registry docker'
        required: true
        type: string
      docker_owner:
        description: 'Owner docker'
        required: true
        type: string
      docker_image_name:
        description: 'Docker image name'
        required: true
        type: string
      version_fallback:
        description: 'Docker image name'
        required: true
        type: string
        default: '1.0.0'
      environment_approved:
        description: 'environment for manual approved '
        required: false
        type: string
        default: "manual-approval"
    secrets:
      docker_registry_user:
        description: 'User registry docker'
        required: true
      docker_registry_password:
        description: 'Password registry docker'
        required: true
      CUSTOM_GITHUB_TOKEN:
        description: 'GitHub token for authentication'
        required: true
      GITHUB_USERNAME:
        description: 'GitHub username for authentication'
        required: true
      MAVEN_PAT:
        description: 'GitHub MAVEN_PAT'
        required: true

jobs:
  #  job executé uniquement si c’est un pull Request venant d’une branche hotfix/*
  # ou d'un push si ce n’est pas sur develop, release/*, support/*, hotfix/*
  maven_test_build:
    name: Maven build test
    if: |
      (github.event_name == 'pull_request' && startsWith(github.head_ref || '', 'hotfix')) ||
      (github.event_name == 'push' &&
      github.ref != 'refs/heads/develop' &&
      !startsWith(github.ref, 'refs/heads/release/') &&
      !startsWith(github.ref, 'refs/heads/support/') &&
      !startsWith(github.ref, 'refs/heads/hotfix/'))
    uses: ./.github/workflows/maven-build-template.yml
    with:
      maven_test_only: true
      maven_cli_opts: ${{ inputs.MAVEN_CLI_OPTS }}
      GITHUB_USERNAME: ${{ secrets.GITHUB_USERNAME }}
      CUSTOM_GITHUB_TOKEN: ${{ secrets.MAVEN_PAT }}
      MAVEN_PAT: ${{ secrets.MAVEN_PAT }}

  # Branche develop, et que l'événement est un push normal (pas via API, planificateur ou appel)
  # ou branche de type release/*, sans condition sur l’événement.
  maven_build:
    name: Maven build
    if: |
      (github.ref == 'refs/heads/develop' &&  github.event_name != 'repository_dispatch' &&  github.event_name != 'schedule') ||
      startsWith(github.ref, 'refs/heads/release/') ||
      (startsWith(github.ref, 'refs/heads/hotfix/') && github.event_name == 'workflow_dispatch')
    uses: ./.github/workflows/maven-build-template.yml
    with:
      maven_test_only: false
      maven_cli_opts: ${{ inputs.MAVEN_CLI_OPTS }}
      GITHUB_USERNAME: ${{ secrets.GITHUB_USERNAME }}
      CUSTOM_GITHUB_TOKEN: ${{ secrets.MAVEN_PAT }}
      MAVEN_PAT: ${{ secrets.MAVEN_PAT }}

  docker_build_push:
    name: Docker build and push
    needs: maven_build
    uses: ./.github/workflows/jobs-docker.yml
    with:
      docker_registry: ${{ inputs.docker_registry }}
      docker_owner: ${{ inputs.docker_owner }}
      docker_image_name: ${{ inputs.docker_image_name }}
      version_fallback: ${{ inputs.version_fallback }}
      environment_approved: ${{ inputs.environment_approved }}
    secrets:
      docker_registry_user: ${{ secrets.docker_registry_user }}
      docker_registry_password: ${{ secrets.docker_registry_password }}

  generate-doc:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sn-dkr-dig-tmp/digital-tmp-builder:openjdk21-latest

    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/develop' &&
      env.DOC_GEN_MODE != 'NONE' &&
      github.event_name != 'repository_dispatch' &&
      github.event_name != 'workflow_dispatch' &&
      github.event_name != 'schedule'
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Configurer les paramètres Maven
      - name: Setup Maven settings
        uses: ./.github/actions/setup-mvn
        env:
          MAVEN_SETTINGS: ${{ secrets.MAVEN_SETTINGS }}
          MAVEN_SETTINGS_SECURITY: ${{ secrets.MAVEN_SETTINGS_SECURITY }}

      - name: Extract project name
        id: project
        run: |
          NAME=$(mvn ${{ env.MAVEN_CLI_OPTS }} -B org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.name | grep -vP '^\[' | sed 's/-parent$//g')
          echo "project_name=$NAME" >> $GITHUB_OUTPUT

      - name: Generate documentation
        run: |
          if [ "${DOC_GEN_MODE}" = "SWAGGER" ]; then
            mvn ${{ env.MAVEN_CLI_OPTS }} test -Pdoc-generation
          else
            mvn ${{ env.MAVEN_CLI_OPTS }} -B clean process-resources
          fi

      - name: Prepare documentation for GitHub Pages
        run: |
          mkdir -p public
          DOC_PATH="${{ steps.project.outputs.project_name }}/target/asciidoc/html"
          if [ -d "$DOC_PATH" ]; then
            mv -f $DOC_PATH/* public
          else
            echo "Skipping: no documentation to process"
          fi

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./public

  deploy-doc:
    needs: generate-doc
    if: success()
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
