name: Vérification et démarrage de la release

on:
  workflow_call:
    inputs:
      PRODUCT_RELEASE_VERSION:
        description: 'Version du produit (ex: 3.3)'
        required: true
        type: string
      workflow_file:
        description: 'Nom du fichier du workflow'
        required: false
        default: 'build.yml'
        type: string
      maven_cli_opts:
        description: Options for Maven CLI
        required: false
        default: ""
        type: string
      released:
        description: Indiquer si la release doit etre lancer
        required: false
        default: false
        type: boolean
      environment_approved:
        description: Environment pour lancer le job
        required: false
        default: "none"
        type: string
      enabled_verification_changelog:
        description: 'Activer ou désactiver la vérification'
        required: false
        type: boolean
        default: false
      build_maven:
        description: 'Enabled to build maven'
        required: false
        type: boolean
        default: false
      build_image:
        description: 'Enabled to build docker image'
        required: false
        type: boolean
        default: false
      project_deployment_file_path:
        description: 'Fichier de déploiement'
        required: false
        type: string
    secrets:
      CUSTOM_GITHUB_TOKEN:
        description: 'GitHub token for authentication'
        required: true
      GITHUB_USERNAME:
        description: 'GitHub username for authentication'
        required: true
jobs:

  git-tag:
    if: startsWith(github.ref_name, 'release/')
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sn-dkr-dig-tmp/digital-tmp-builder:openjdk21-latest
      volumes:
        - ${{ github.workspace }}:/workspace

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurer Git
        uses: SN-DKR-DIG-TMP/digital-tmp-workflow-actions/actions/config-git@main
        with:
          github_username: ${{ secrets.GITHUB_USERNAME }}
          github_token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}

      - name: Checkout release branch
        run: git checkout -f "${{ github.ref_name }}"

      - name: Récupérer la version du module
        uses: SN-DKR-DIG-TMP/digital-tmp-workflow-actions/actions/get-maven-version@main
        id: get-maven-version
        with:
          maven_cli_opts: ${{ inputs.maven_cli_opts }}

      - name: Définir la version Maven dans une variable d'environnement
        run: echo "PROJECT_VERSION=${{ steps.get-maven-version.outputs.version }}" >> $GITHUB_ENV

      - name: Récupérer la version du module
        uses: SN-DKR-DIG-TMP/digital-tmp-workflow-actions/actions/tag-with-version@main
        with:
          project_version: ${{ env.PROJECT_VERSION }}

  start-release:
    name: Démarrer la release
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_approved }}
    if: |
      github.ref_name == 'develop' &&
      inputs.PRODUCT_RELEASE_VERSION != '' &&
      github.event_name == 'workflow_dispatch' &&
      inputs.released == true
    container:
      image: ghcr.io/sn-dkr-dig-tmp/digital-tmp-builder:openjdk21-latest
      volumes:
        - ${{ github.workspace }}:/workspace

    steps:
      - name: Check PRODUCT_RELEASE_VERSION
        run: |
          echo "Starting release with version: $PRODUCT_RELEASE_VERSION"
        env:
          PRODUCT_RELEASE_VERSION: ${{ inputs.PRODUCT_RELEASE_VERSION }}

      - name: Checkout du dépôt
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name:  Configurer Git
        uses: SN-DKR-DIG-TMP/digital-tmp-workflow-actions/actions/config-git@main
        with:
          github_username: ${{ secrets.GITHUB_USERNAME }}
          github_token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}

      - name:  Vérifier format de version
        run: |
          if [[ ! "${{ inputs.PRODUCT_RELEASE_VERSION }}" =~ ^[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Mauvais format de version. Exemple attendu : 3.3"
            exit 1
          fi

      - name: Créer une branche release
        run: |
          git checkout -b release/${{ inputs.PRODUCT_RELEASE_VERSION }}

      - name: Supprimer les -SNAPSHOT dans pom.xml
        run: |
          find . -type f -name "pom.xml" -exec sed -i "s/-SNAPSHOT//g" {} +

      - name:  Récupérer la version du module
        uses: SN-DKR-DIG-TMP/digital-tmp-workflow-actions/actions/get-maven-version@main
        id: get-maven-version
        with:
          maven_cli_opts: ${{ inputs.maven_cli_opts }}

      - name: Définir la version Maven dans une variable d'environnement
        run: echo "PROJECT_VERSION=${{ steps.get-maven-version.outputs.version }}" >> $GITHUB_ENV

      - name: Afficher les infos de contexte
        run: |
          echo "github.event_name: ${{ github.event_name }}"
          echo "github.ref: ${{ github.ref }}"
          echo "inputs.build_image: ${{ inputs.build_image }}"
          echo "inputs.build_maven: ${{ inputs.build_maven }}"
          echo "inputs.released: ${{ inputs.released }}"
          echo "branch name: ${{ github.ref_name }}"
          echo "project_deployment_file_path: ${{ inputs.project_deployment_file_path }}"

      - name: Mise à jour des fichiers de déploiement
        if: |
          inputs.project_deployment_file_path != '' &&
          (endsWith(inputs.project_deployment_file_path, '.yml') || endsWith(inputs.project_deployment_file_path, '.yaml'))
        run: |
          ls
          ls /workspace
          FILE="${{ inputs.project_deployment_file_path }}"
          echo " Fichier fourni : $FILE"

          if [ -f "$FILE" ]; then
            echo " Fichier existe, mise à jour en cours..."
            sed -i -E 's/(image: .+:[0-9]+\.[0-9]+\.[0-9]+)-[a-zA-Z0-9._-]+/\1/g' "$FILE"
          else
            echo " Le fichier spécifié n’existe pas : $FILE"
          fi

      - name: Mise à jour des fichiers package*.json avec la version du projet
        run: |
          for package_file in $(find . -type f -name 'package*.json'); do
            sed -i -e "1,/version/s#\(\"version\"\)\(:.*\)\(\"\)\(.*\)\(\"\)#\1\2\"${PROJECT_VERSION}\"#1" ${package_file}
          done
        shell: bash

      - name: Mettre à jour changelog (log2release)
        if: inputs.enabled_verification_changelog == true
        run: log2release release ${{ env.PROJECT_VERSION }}

      - name: Commit et push release branch
        run: |
          git add .
          git commit -m ":bookmark: Release ${{ env.PROJECT_VERSION }} [skip ci]"
          git push origin release/${{ inputs.PRODUCT_RELEASE_VERSION }}

      - name: Lancer la pipeline du release
        uses: SN-DKR-DIG-TMP/digital-tmp-workflow-actions/actions/trigger-workflow@main
        with:
          api_token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          workflow_file: ${{ inputs.workflow_file }}
          branch_name: "release/${{ inputs.PRODUCT_RELEASE_VERSION }}"
          product_release_version: ''
          build_maven: true
          build_image: true
          released: false

      - name: Préparer version SNAPSHOT suivante
        run: |
          git checkout develop
          find . -type f -name "pom.xml" -exec sed -i "s/-SNAPSHOT//g" {} +
          PROJECT_VERSION=$(echo ${PROJECT_VERSION//[!0-9.]/} | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{$(NF-1)=sprintf("%0*d", length($(NF-1)), ($(NF-1)+1));$NF="0-SNAPSHOT"; print}')
          echo "NEW_PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV

      - name: Mettre à jour changelog pour develop
        if: inputs.enabled_verification_changelog == true
        run: |
          log2release release ${{ env.PROJECT_VERSION }} --unreleased

      - name:  Récupérer la version mineure du projet
        uses: SN-DKR-DIG-TMP/digital-tmp-workflow-actions/actions/set-new-project-minor-version@main
        id: set-new-project-minor-version
        with:
          project_version: ${{ env.PROJECT_VERSION }}

      - name: Définir la version mineure Maven dans une variable d'environnement
        run: echo "NEW_PROJECT_VERSION=${{ steps.set-new-project-minor-version.outputs.updated_version }}" >> $GITHUB_ENV

      - name: Appliquer nouvelle version SNAPSHOT
        run: |
          mvn -B build-helper:parse-version org.codehaus.mojo:versions-maven-plugin:2.11.0:set -DnewVersion=${{ env.NEW_PROJECT_VERSION }} org.codehaus.mojo:versions-maven-plugin:2.11.0:commit

      - name: Mise à jour des fichiers package*.json avec la version mineure du projet
        run: |
          for package_file in $(find . -type f -name 'package*.json'); do
            sed -i -e "1,/version/s#\(\"version\"\)\(:.*\)\(\"\)\(.*\)\(\"\)#\1\2\"${NEW_PROJECT_VERSION}\"#1" ${package_file}
          done
        shell: bash

      - name: Commit et push develop avec nouvelle version
        run: |
          git add .
          git commit -m ":arrow_up: Switch to ${{ env.NEW_PROJECT_VERSION }} [skip ci]"
          git push origin develop

      - name: Lancer la pipeline sur develop
        uses: SN-DKR-DIG-TMP/digital-tmp-workflow-actions/actions/trigger-workflow@main
        with:
          api_token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          workflow_file: ${{ inputs.workflow_file }}
          branch_name: "develop"
          product_release_version: ''
          build_maven: true
          build_image: true
          released: false

      - name: Save version to file
        run: echo "${{ steps.get-maven-version.outputs.version }}" > .project.version

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: project-version
          path: .project.version
