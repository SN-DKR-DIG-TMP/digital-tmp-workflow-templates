name: Job build docker

on:
  push:
    branches:
      - '**'  # écouter tous les push
  pull_request:
    branches:
      - '**'  # écouter toutes les PR
  workflow_call:
    inputs:
      docker_registry:
        description: 'Host registry docker'
        required: true
        type: string
      docker_owner:
        description: 'Owner docker'
        required: true
        type: string
      docker_image_name:
        description: 'Docker image name'
        required: true
        type: string
      version_fallback:
        description: 'Docker image name'
        required: true
        type: string
        default: '1.0.0'
      environment_approved:
        description: 'environment for manual approved '
        required: false
        type: string
        default: "manual-approval"
      project_name:
        description: 'Project name'
        required: false
        type: string
        default: 'atos'
    secrets:
      docker_registry_user:
        description: 'User registry docker'
        required: true
      docker_registry_password:
        description: 'Password registry docker'
        required: true
      CUSTOM_GITHUB_TOKEN:
        description: 'GitHub token for authentication'
        required: true
      GITHUB_USERNAME:
        description: 'GitHub username for authentication'
        required: true

jobs:

  docker_build_project:
    name: 'Initialize docker build project'
    if: |
      github.ref == 'refs/heads/develop' ||
      startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    steps:
      - name: Initialize docker build project
        run: |
          echo "Initialize docker build project"

  docker-build-prepare:
    runs-on: ubuntu-latest
    needs: docker_build_project
    container:
      image: ghcr.io/sn-dkr-dig-tmp/digital-tmp-builder:openjdk21-latest
      volumes:
        - ${{ github.workspace }}:/workspace
    if: |
      github.ref == 'refs/heads/develop' ||
      startsWith(github.ref, 'refs/heads/release/')
    outputs:
      registry_img_name: ${{ steps.meta.outputs.registry_image_name }}
      img_version: ${{ steps.meta.outputs.version }}
      full_image_name: ${{ steps.meta.outputs.full_image_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Upload entrypoint.sh
        uses: actions/upload-artifact@v4
        with:
          name: entrypoint-file
          path: /usr/local/bin/entrypoint.sh

      - name: "Exécuter l'extracteur Maven et Builder d'Images Docker"
        uses: SN-DKR-DIG-TMP/digital-tmp-workflow-actions/actions/pom-variables@main
        id: meta
        env:
          GITHUB_TOKEN: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ secrets.GITHUB_USERNAME }}
        with:
          DOCKER_IMAGE_NAME: ${{ inputs.project_name }}${{ inputs.docker_image_name }}
          IMAGE_REGISTRY: ${{ inputs.docker_registry }}/${{ inputs.docker_owner }}
          VERSION_FALLBACK: ${{ inputs.version_fallback }}

  snapshot-docker-build-prepare:
    runs-on: ubuntu-latest
    needs: docker_build_project
    environment: ${{ inputs.environment_approved }}
    if: |
      startsWith(github.head_ref, 'hotfix/') ||
      startsWith(github.ref, 'refs/heads/feature/') ||
      startsWith(github.ref, 'refs/heads/future/')
    outputs:
      registry_img_name: ${{ steps.meta.outputs.registry_image_name }}
      img_version: ${{ steps.meta.outputs.version }}
      full_image_name: ${{ steps.meta.outputs.full_image_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Upload entrypoint.sh
        uses: actions/upload-artifact@v4
        with:
          name: entrypoint-file
          path: /usr/local/bin/entrypoint.sh

      - name: "Exécuter l'extracteur Maven et Builder d'Images Docker"
        uses: SN-DKR-DIG-TMP/digital-tmp-workflow-actions/actions/pom-variables@main
        id: meta
        env:
          GITHUB_TOKEN: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ secrets.GITHUB_USERNAME }}
        with:
          DOCKER_IMAGE_NAME: ${{ inputs.docker_image_name }}
          IMAGE_REGISTRY: ${{ inputs.docker_registry }}/${{ inputs.docker_owner }}
          VERSION_FALLBACK: ${{ inputs.version_fallback }}

  docker-build-and-push-image:
    runs-on: ubuntu-latest
    needs: docker-build-prepare
    if: |
      github.ref == 'refs/heads/develop' ||
      startsWith(github.ref, 'refs/heads/release/')
    steps:
      - uses: actions/checkout@v4

      - name: "Gerer les artifact pour builder l'image"
        uses: SN-DKR-DIG-TMP/digital-tmp-workflow-actions/actions/docker-prepare-artifact@main

      - name: Use Image name
        run: |
          echo "Image  est ${{ needs.docker-build-prepare.outputs.registry_img_name }}"

      - name: "Gerer les artifact pour builder l'image"
        uses: SN-DKR-DIG-TMP/digital-tmp-workflow-actions/actions/build-and-push-image@main
        with:
          docker_registry: ${{ inputs.docker_registry }}
          docker_registry_user: ${{ secrets.docker_registry_user }}
          docker_registry_password: ${{ secrets.docker_registry_password }}
          full_image_name: ${{ needs.docker-build-prepare.outputs.registry_img_name }}


  snapshot-docker-build-and-push-image:
    runs-on: ubuntu-latest
    needs: snapshot-docker-build-prepare
    environment: ${{ inputs.environment_approved }}
    if: |
      startsWith(github.head_ref, 'hotfix/') ||
      startsWith(github.ref, 'refs/heads/feature/') ||
      startsWith(github.ref, 'refs/heads/future/')
    steps:
      - uses: actions/checkout@v4

      - name: "Gerer les artifact pour builder l'image"
        uses: SN-DKR-DIG-TMP/digital-tmp-workflow-actions/actions/docker-prepare-artifact@main

      - name: Use Image name
        run: |
          echo "Image  est ${{ needs.docker-build-prepare.outputs.registry_img_name }}"

      - name: "Gerer les artifact pour builder l'image"
        uses: SN-DKR-DIG-TMP/digital-tmp-workflow-actions/actions/build-and-push-image@main
        with:
          docker_registry: ${{ inputs.docker_registry }}
          docker_registry_user: ${{ secrets.docker_registry_user }}
          docker_registry_password: ${{ secrets.docker_registry_password }}
          full_image_name: ${{ needs.docker-build-prepare.outputs.registry_img_name }}
