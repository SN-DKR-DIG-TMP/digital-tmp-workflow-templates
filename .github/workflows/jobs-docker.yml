name: Job build docker

on:
  push:
    branches:
      - '**'  # écouter tous les push
  pull_request:
    branches:
      - '**'  # écouter toutes les PR
  workflow_call:
    inputs:
      inputs:
        docker_registry:
          description: 'Host registry docker'
          required: true
          type: string
        docker_owner:
          description: 'Owner docker'
          required: true
          type: string
        docker_image_name:
          description: 'Docker image name'
          required: true
          type: string
        version_fallback:
          description: 'Docker image name'
          required: true
          type: string
          default: '1.0.0'
        environment_approved:
          description: 'environment for manual approved '
          required: false
          type: string
          default: "manual-approval"
    secrets:
      docker_registry_user:
        description: 'User registry docker'
        required: true
      docker_registry_password:
        description: 'Password registry docker'
        required: true

jobs:

  docker_build_project:
    name: 'Initialize docker build project'
    if: |
      github.event_name == 'workflow_dispatch' ||
      (
        (github.ref == 'refs/heads/develop' && github.event_name != 'repository_dispatch' && github.event_name != 'workflow_dispatch' && github.event_name != 'schedule') ||
        startsWith(github.ref, 'refs/heads/release/')
      )
    runs-on: ubuntu-latest
    steps:
      - name: Initialize docker build project
        run: |
          echo "Initialize docker build project"

  docker-build-prepare:
    runs-on: ubuntu-latest
    needs: docker_build_project
    if: |
      (github.ref == 'refs/heads/develop' && github.event_name != 'repository_dispatch' && github.event_name != 'workflow_dispatch' && github.event_name != 'schedule') ||
      startsWith(github.ref, 'refs/heads/release/')
    outputs:
      registry_img_name: ${{ steps.meta.outputs.registry_image_name }}
      img_version: ${{ steps.meta.outputs.version }}
      full_image_name: ${{ steps.meta.outputs.full_image_name }}
    steps:
      - uses: actions/checkout@v4
      - name: "Exécuter l'extracteur Maven et Builder d'Images Docker"
        uses: ./.github/actions/pom-variables
        id: meta
        with:
          DOCKER_IMAGE_NAME: ${{ inputs.docker_image_name }}
          IMAGE_REGISTRY: ${{ inputs.docker_registry }}/${{ inputs.docker_owner }}
          VERSION_FALLBACK: ${{ inputs.version_fallback }}

  snapshot-docker-build-prepare:
    runs-on: ubuntu-latest
    needs: docker_build_project
    environment: ${{ inputs.environment_approved }}
    if: |
      startsWith(github.head_ref, 'hotfix/') ||
      startsWith(github.ref, 'refs/heads/feature/') ||
      startsWith(github.ref, 'refs/heads/future/')
    outputs:
      registry_img_name: ${{ steps.meta.outputs.registry_image_name }}
      img_version: ${{ steps.meta.outputs.version }}
      full_image_name: ${{ steps.meta.outputs.full_image_name }}
    steps:
      - uses: actions/checkout@v4
      - name: "Exécuter l'extracteur Maven et Builder d'Images Docker"
        uses: ./.github/actions/pom-variables
        id: meta
        with:
          DOCKER_IMAGE_NAME: ${{ inputs.docker_image_name }}
          IMAGE_REGISTRY: ${{ inputs.docker_registry }}/${{ inputs.docker_owner }}
          VERSION_FALLBACK: ${{ inputs.version_fallback }}

  docker-build-and-push-image:
    runs-on: ubuntu-latest
    needs: docker-build-prepare
    if: |
      (github.ref == 'refs/heads/develop' && github.event_name != 'repository_dispatch' && github.event_name != 'workflow_dispatch' && github.event_name != 'schedule') ||
      startsWith(github.ref, 'refs/heads/release/')
    steps:
      - name: Use Image name
        run: echo "Image  est ${{ needs.docker-build-prepare.outputs.registry_img_name }}"

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.docker_registry }}
          username: ${{ secrets.docker_registry_user }}
          password: ${{ secrets.docker_registry_password }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ needs.docker-build-prepare.outputs.registry_img_name }}
          labels: |
            version=${{ needs.docker-build-prepare.outputs.img_version }}
            maintainer=${{ secrets.docker_registry_user }}

  snapshot-docker-build-and-push-image:
    runs-on: ubuntu-latest
    needs: snapshot-docker-build-prepare
    environment: ${{ inputs.environment_approved }}
    if: |
      startsWith(github.head_ref, 'hotfix/') ||
      startsWith(github.ref, 'refs/heads/feature/') ||
      startsWith(github.ref, 'refs/heads/future/')
    steps:
      - name: Use Image name
        run: echo "Image  est ${{ needs.docker-build-prepare.outputs.registry_img_name }}"

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.docker_registry }}
          username: ${{ secrets.docker_registry_user }}
          password: ${{ secrets.docker_registry_password }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ needs.docker-build-prepare.outputs.registry_img_name }}
          labels: |
            version=${{ needs.docker-build-prepare.outputs.img_version }}
            maintainer=${{ secrets.docker_registry_user }}
